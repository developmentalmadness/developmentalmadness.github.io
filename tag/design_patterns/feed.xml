<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>developMENTALmadness: design_patterns</title>
  <subtitle>Posts tagged with design_patterns</subtitle>
  <id>http://www.developmentalmadness.com</id>
  <link href="http://www.developmentalmadness.com"/>
  <link href="http://www.developmentalmadness.com/tag/design_patterns/feed.xml" rel="self"/>
  <updated>2008-04-25T18:48:00+00:00</updated>
  <author>
    <name>Mark J. Miller</name>
  </author>
  <entry>
    <title>Abstracting System.Web.UI.ScriptManager away from the Web Forms model</title>
    <link rel="alternate" href="http://www.developmentalmadness.com/2008/04/25/abstracting-systemwebuiscriptmanager/"/>
    <id>http://www.developmentalmadness.com/2008/04/25/abstracting-systemwebuiscriptmanager/</id>
    <published>2008-04-25T18:48:00+00:00</published>
    <updated>2016-11-26T15:23:19+00:00</updated>
    <author>
      <name>Mark J. Miller</name>
    </author>
    <summary type="html">As I continue to work with the ASP.NET MVC framework I continue to be inspired to dig deeper into things, to find out how they work and how I can make them work with this awesome new framework.

The case in point here is using ASP.NET Ajax controls with</summary>
  </entry>
  <entry>
    <title>Entity Framework: Abstracting ObjectContext</title>
    <link rel="alternate" href="http://www.developmentalmadness.com/2009/02/25/entity_framework_abstracting_object_context/"/>
    <id>http://www.developmentalmadness.com/2009/02/25/entity_framework_abstracting_object_context/</id>
    <published>2009-02-25T23:40:00+00:00</published>
    <updated>2016-11-26T15:23:19+00:00</updated>
    <author>
      <name>Mark J. Miller</name>
    </author>
    <summary type="html">Wither you are a TDD purest or not, if you are developing with Entity Framework and testability is important to you, then you have tried some workaround or applied some pattern to make testing possible in your project. When you have a class or method</summary>
  </entry>
  <entry>
    <title>Silverlight and Prism: Decoupling the WCF Client Proxy</title>
    <link rel="alternate" href="http://www.developmentalmadness.com/2009/03/10/silverlight_and_prism_decoupling_the_wcf_client_proxy/"/>
    <id>http://www.developmentalmadness.com/2009/03/10/silverlight_and_prism_decoupling_the_wcf_client_proxy/</id>
    <published>2009-03-10T23:49:00+00:00</published>
    <updated>2016-11-26T15:23:19+00:00</updated>
    <author>
      <name>Mark J. Miller</name>
    </author>
    <summary type="html">I’m in the process of creating the . Hopefully, for once, I’ll see it through to the end and also post the source and an insightful blog entry to help everybody who’s struggling to do the same

Anyhow, I’ve taken the recent release of Prism v2, which</summary>
  </entry>
  <entry>
    <title>Prism for Silverlight 2: Taking ‘Hello World’ to a Whole New Level</title>
    <link rel="alternate" href="http://www.developmentalmadness.com/2009/06/08/prism_for_silverlight_2_taking_hello_world_to_a_whole_new_level/"/>
    <id>http://www.developmentalmadness.com/2009/06/08/prism_for_silverlight_2_taking_hello_world_to_a_whole_new_level/</id>
    <published>2009-06-08T18:09:00+00:00</published>
    <updated>2016-11-26T15:23:19+00:00</updated>
    <author>
      <name>Mark J. Miller</name>
    </author>
    <summary type="html">The World’s Most Over-engineered “Hello World” Demo

Download Source

I wanted to build a demo/guidance application for Silverlight


WCF
Design-time data binding
Independent, decoupled modules
Commanding support


I chose to use the (aka Prism 2) since</summary>
  </entry>
</feed>
